import { 
  collection, 
  addDoc, 
  getDocs, 
  query, 
  orderBy, 
  limit, 
  serverTimestamp,
  doc,
  updateDoc,
  where,
  onSnapshot,
  setDoc
} from 'firebase/firestore'
import { db } from '../config/firebase'

// T·∫°o th√¥ng b√°o m·ªõi (ch·ªâ admin)
export const createNotification = async (notificationData) => {
  try {
    const notification = {
      title: notificationData.title,
      message: notificationData.message,
      type: notificationData.type || 'info', // info, success, warning, error
      priority: notificationData.priority || 'normal', // low, normal, high
      createdAt: serverTimestamp(),
      isActive: true,
      targetUsers: notificationData.targetUsers || 'all', // all, specific
      expiresAt: notificationData.expiresAt || null
    }
    
    const docRef = await addDoc(collection(db, 'notifications'), notification)
    return docRef.id
  } catch (error) {
    console.error('Error creating notification:', error)
    throw error
  }
}

// L·∫•y t·∫•t c·∫£ th√¥ng b√°o
export const getNotifications = async () => {
  try {
    const q = query(
      collection(db, 'notifications'),
      where('isActive', '==', true),
      orderBy('createdAt', 'desc'),
      limit(50)
    )
    
    const querySnapshot = await getDocs(q)
    const notifications = []
    
    querySnapshot.forEach((doc) => {
      notifications.push({
        id: doc.id,
        ...doc.data()
      })
    })
    
    return notifications
  } catch (error) {
    console.error('Error getting notifications:', error)
    // Tr·∫£ v·ªÅ m·∫£ng r·ªóng thay v√¨ throw error
    return []
  }
}

// L·∫•y th√¥ng b√°o real-time v·ªõi error handling
export const subscribeToNotifications = (callback) => {
  try {
    const q = query(
      collection(db, 'notifications'),
      where('isActive', '==', true),
      orderBy('createdAt', 'desc'),
      limit(50)
    )
    
    return onSnapshot(q, (querySnapshot) => {
      const notifications = []
      querySnapshot.forEach((doc) => {
        notifications.push({
          id: doc.id,
          ...doc.data()
        })
      })
      callback(notifications)
    }, (error) => {
      console.error('Error in notification subscription:', error)
      callback([]) // Tr·∫£ v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
    })
  } catch (error) {
    console.error('Error subscribing to notifications:', error)
    callback([]) // Tr·∫£ v·ªÅ m·∫£ng r·ªóng khi c√≥ l·ªói
    return () => {} // Return empty function
  }
}

// ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc (simplified)
export const markNotificationAsRead = async (userId, notificationId) => {
  try {
    const userNotificationRef = doc(db, 'userNotifications', `${userId}_${notificationId}`)
    await setDoc(userNotificationRef, {
      userId,
      notificationId,
      isRead: true,
      readAt: serverTimestamp(),
      createdAt: serverTimestamp()
    }, { merge: true })
  } catch (error) {
    console.error('Error marking notification as read:', error)
    // Kh√¥ng throw error ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng UI
  }
}

// L·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc c·ªßa user (simplified)
export const getUnreadNotificationCount = async (userId) => {
  try {
    const q = query(
      collection(db, 'userNotifications'),
      where('userId', '==', userId),
      where('isRead', '==', false)
    )
    
    const querySnapshot = await getDocs(q)
    return querySnapshot.size
  } catch (error) {
    console.error('Error getting unread count:', error)
    return 0
  }
}

// L·∫•y s·ªë th√¥ng b√°o ch∆∞a ƒë·ªçc real-time v·ªõi error handling
export const subscribeToUnreadCount = (userId, callback) => {
  try {
    const q = query(
      collection(db, 'userNotifications'),
      where('userId', '==', userId),
      where('isRead', '==', false)
    )
    
    return onSnapshot(q, (querySnapshot) => {
      const count = querySnapshot.size
      callback(count > 99 ? '99+' : count.toString())
    }, (error) => {
      console.error('Error in unread count subscription:', error)
      callback('0') // Tr·∫£ v·ªÅ 0 khi c√≥ l·ªói
    })
  } catch (error) {
    console.error('Error subscribing to unread count:', error)
    callback('0') // Tr·∫£ v·ªÅ 0 khi c√≥ l·ªói
    return () => {} // Return empty function
  }
}

// T·∫°o th√¥ng b√°o deployment (t·ª± ƒë·ªông)
export const createDeploymentNotification = async () => {
  try {
    const notification = {
      title: 'üöÄ C·∫≠p nh·∫≠t m·ªõi',
      message: '·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c t√≠nh nƒÉng m·ªõi! H√£y kh√°m ph√° ngay.',
      type: 'success',
      priority: 'normal',
      createdAt: serverTimestamp(),
      isActive: true,
      targetUsers: 'all',
      expiresAt: null
    }
    
    const docRef = await addDoc(collection(db, 'notifications'), notification)
    return docRef.id
  } catch (error) {
    console.error('Error creating deployment notification:', error)
    throw error
  }
}

// T·∫°o th√¥ng b√°o demo ƒë·ªÉ test
export const createDemoNotification = async () => {
  try {
    const notification = {
      title: 'üéâ Ch√†o m·ª´ng!',
      message: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng h·ªçc ti·∫øng Nh·∫≠t! H√£y b·∫Øt ƒë·∫ßu h·ªçc ngay h√¥m nay.',
      type: 'info',
      priority: 'normal',
      createdAt: serverTimestamp(),
      isActive: true,
      targetUsers: 'all',
      expiresAt: null
    }
    
    const docRef = await addDoc(collection(db, 'notifications'), notification)
    console.log('‚úÖ Demo notification created:', docRef.id)
    return docRef.id
  } catch (error) {
    console.error('Error creating demo notification:', error)
    throw error
  }
} 