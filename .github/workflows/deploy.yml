name: Deploy to GitHub Pages

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Auto-tagging job (only on master push)
  create-tag:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    outputs:
      version: ${{ steps.tag.outputs.version }}
      release_notes: ${{ steps.tag.outputs.release_notes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_OUTPUT

      - name: Generate version tag
        id: tag
        run: |
          # Generate version based on date and build number
          DATE=$(date +'%Y.%m.%d')
          BUILD_NUMBER=$(date +'%H%M')
          VERSION="v${DATE}.${BUILD_NUMBER}"
          
          # Get commit message as release notes (first line only, clean format)
          RELEASE_NOTES=$(git log -1 --pretty=format:"%s" | sed 's/"/\\"/g')
          
          # Get commit hash for reference
          COMMIT_HASH=$(git rev-parse --short HEAD)
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "release_notes=${RELEASE_NOTES}" >> $GITHUB_OUTPUT
          echo "commit_hash=${COMMIT_HASH}" >> $GITHUB_OUTPUT
          
          echo "üè∑Ô∏è Generated version: ${VERSION}"
          echo "üìù Release notes: ${RELEASE_NOTES}"
          echo "üîó Commit: ${COMMIT_HASH}"

      - name: Create and push tag
        run: |
          VERSION="${{ steps.tag.outputs.version }}"
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a "${VERSION}" -m "Release ${{ steps.tag.outputs.version }}: ${{ steps.tag.outputs.release_notes }}"
          git push origin "${VERSION}"
          echo "‚úÖ Created and pushed tag: ${VERSION}"

  # Build job
  build:
    runs-on: ubuntu-latest
    needs: [create-tag]
    if: always() && (needs.create-tag.result == 'success' || needs.create-tag.result == 'skipped')
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build
      env:
        # Gemini API Key
        VITE_GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        
        # Firebase Configuration
        VITE_FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
        VITE_FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
        VITE_FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
        VITE_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
        VITE_FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        VITE_FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
      run: npm run build
        
    - name: Setup Pages
      uses: actions/configure-pages@v4
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v3
      with:
        path: './dist'

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Create deployment notification
  notify:
    runs-on: ubuntu-latest
    needs: [create-tag, deploy]
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Create deployment notification
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          VERSION: ${{ needs.create-tag.outputs.version || 'dev' }}
          RELEASE_NOTES: ${{ needs.create-tag.outputs.release_notes || 'Development build' }}
        run: |
          node -e "
          const { initializeApp } = require('firebase/app');
          const { getFirestore, addDoc, collection, serverTimestamp } = require('firebase/firestore');
          
          const firebaseConfig = {
            apiKey: process.env.FIREBASE_API_KEY,
            authDomain: process.env.FIREBASE_AUTH_DOMAIN,
            projectId: process.env.FIREBASE_PROJECT_ID,
            storageBucket: process.env.FIREBASE_STORAGE_BUCKET,
            messagingSenderId: process.env.FIREBASE_MESSAGING_SENDER_ID,
            appId: process.env.FIREBASE_APP_ID
          };
          
          const app = initializeApp(firebaseConfig);
          const db = getFirestore(app);
          
          const version = process.env.VERSION || 'dev';
          const releaseNotes = process.env.RELEASE_NOTES || 'Development build';
          
          // Count changed files in the latest commit to determine priority
          const { execSync } = require('child_process');
          let changedFilesCount = 0;
          let priority = 'normal';
          let priorityEmoji = 'üì¶';
          let priorityText = 'Minor';
          
          try {
            const output = execSync('git diff --name-only HEAD~1 HEAD', { encoding: 'utf8' });
            changedFilesCount = output.trim().split('\n').filter(f => f.length > 0).length;
            
            // Determine priority based on number of changed files
            if (changedFilesCount <= 3) {
              priority = 'normal';
              priorityEmoji = 'üì¶';
              priorityText = 'Minor';
            } else if (changedFilesCount <= 6) {
              priority = 'high';
              priorityEmoji = 'üöÄ';
              priorityText = 'Major';
            } else {
              priority = 'high';
              priorityEmoji = 'üî•';
              priorityText = 'Critical';
            }
          } catch (error) {
            console.log('Could not determine changed files count, using default priority');
          }
          
          // Create notification title and message with priority info
          const title = \`\${priorityEmoji} Updated - \${priorityText}\`;
          let message = '·ª®ng d·ª•ng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t v·ªõi c√°c t√≠nh nƒÉng m·ªõi!';
          
          // Add file count info
          message += \`\n\nüìä **Thay ƒë·ªïi:** \${changedFilesCount} file(s) - \${priorityText} update\`;
          
          // Add release notes if available and not just default message
          if (releaseNotes && releaseNotes !== 'Development build' && releaseNotes.trim() !== '') {
            message += \`\n\nüìù **C√≥ g√¨ m·ªõi:**\n\${releaseNotes}\`;
          }
          
          message += '\n\n‚ú® H√£y kh√°m ph√° ngay!';
          
          const notification = {
            title: title,
            message: message,
            type: 'success',
            priority: priority,
            version: version,
            releaseNotes: releaseNotes,
            createdAt: serverTimestamp(),
            isActive: true,
            targetUsers: 'all',
            expiresAt: null,
            metadata: {
              deployedAt: new Date().toISOString(),
              source: 'github-actions'
            }
          };
          
          addDoc(collection(db, 'notifications'), notification)
            .then(() => {
              console.log(\`‚úÖ Deployment notification created for version \${version}\`);
              console.log(\`üìù Release notes: \${releaseNotes}\`);
            })
            .catch(error => console.error('‚ùå Error creating notification:', error));
          " 